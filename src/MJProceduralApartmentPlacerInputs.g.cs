// This code was generated by Hypar.
// Edits to this code will be overwritten the next time you run 'hypar init'.
// DO NOT EDIT THIS FILE.

using Elements;
using Elements.GeoJSON;
using Elements.Geometry;
using Elements.Geometry.Solids;
using Elements.Validators;
using Elements.Serialization.JSON;
using Hypar.Functions;
using Hypar.Functions.Execution;
using Hypar.Functions.Execution.AWS;
using System;
using System.Collections.Generic;
using System.Linq;
using Line = Elements.Geometry.Line;
using Polygon = Elements.Geometry.Polygon;

namespace MJProceduralApartmentPlacer
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public  class MJProceduralApartmentPlacerInputs : S3Args
    
    {
        [Newtonsoft.Json.JsonConstructor]
        
        public MJProceduralApartmentPlacerInputs(UnitMix @unitMix, double @seam, IList<Polygon> @corePolygons, double @cellSize, string bucketName, string uploadsBucket, Dictionary<string, string> modelInputKeys, string gltfKey, string elementsKey, string ifcKey):
        base(bucketName, uploadsBucket, modelInputKeys, gltfKey, elementsKey, ifcKey)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<MJProceduralApartmentPlacerInputs>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @unitMix, @seam, @corePolygons, @cellSize});
            }
        
            this.UnitMix = @unitMix;
            this.Seam = @seam;
            this.CorePolygons = @corePolygons;
            this.CellSize = @cellSize;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Unit Mix", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UnitMix UnitMix { get; set; }
    
        /// <summary>Parameter that can be adjusted for apartment stack placement (2d).</summary>
        [Newtonsoft.Json.JsonProperty("Seam", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0D, 1D)]
        public double Seam { get; set; } = 0.54D;
    
        /// <summary>Core polygons around which apartments should be placed.</summary>
        [Newtonsoft.Json.JsonProperty("CorePolygons", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<Polygon> CorePolygons { get; set; }
    
        /// <summary>CellSize from MJ_ProceduralMass </summary>
        [Newtonsoft.Json.JsonProperty("CellSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(8D, 15D)]
        public double CellSize { get; set; } = 10D;
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class UnitMix 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public UnitMix(IList<Nodes> @nodes)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<UnitMix>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @nodes});
            }
        
            this.Nodes = @nodes;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Nodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<Nodes> Nodes { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class Nodes 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public Nodes(string @spaceType, double @unitCount, double @unitArea, Color @color)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<Nodes>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @spaceType, @unitCount, @unitArea, @color});
            }
        
            this.SpaceType = @spaceType;
            this.UnitCount = @unitCount;
            this.UnitArea = @unitArea;
            this.Color = @color;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Space Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SpaceType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Unit Count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double UnitCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Unit Area", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double UnitArea { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Color", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Color Color { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
}